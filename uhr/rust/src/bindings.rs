/* automatically generated by rust-bindgen 0.57.0 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const UHR_ERR_OK: u32 = 0;
pub const UHR_ERR_INVALID_CONTEXT: u32 = 1;
pub const UHR_ERR_MISSING_REQUIRED_PARAMETER: u32 = 2;
pub const UHR_ERR_INVALID_HTTP_METHOD: u32 = 3;
pub const UHR_ERR_FAILED_TO_CREATE_REQUEST: u32 = 4;
pub const UHR_ERR_UNKNOWN_ERROR_CODE: u32 = 5;
pub const UHR_METHOD_GET: u32 = 0;
pub const UHR_METHOD_HEAD: u32 = 1;
pub const UHR_METHOD_POST: u32 = 2;
pub const UHR_METHOD_PUT: u32 = 3;
pub const UHR_METHOD_PATCH: u32 = 4;
pub const UHR_METHOD_DELETE: u32 = 5;
pub const UHR_METHOD_CONNECT: u32 = 6;
pub const UHR_METHOD_OPTIONS: u32 = 7;
pub const UHR_METHOD_TRACE: u32 = 8;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type UHR_Error = u32;
pub type UHR_Method = u32;
pub type UHR_HttpContext = usize;
pub type UHR_RequestId = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UHR_StringRef {
    pub characters: *const u16,
    pub length: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_UHR_StringRef() {
    assert_eq!(
        ::std::mem::size_of::<UHR_StringRef>(),
        16usize,
        concat!("Size of: ", stringify!(UHR_StringRef))
    );
    assert_eq!(
        ::std::mem::align_of::<UHR_StringRef>(),
        8usize,
        concat!("Alignment of ", stringify!(UHR_StringRef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_StringRef>())).characters as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_StringRef),
            "::",
            stringify!(characters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_StringRef>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_StringRef),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_StringRef>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_StringRef),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UHR_Header {
    pub name: UHR_StringRef,
    pub value: UHR_StringRef,
}
#[test]
fn bindgen_test_layout_UHR_Header() {
    assert_eq!(
        ::std::mem::size_of::<UHR_Header>(),
        32usize,
        concat!("Size of: ", stringify!(UHR_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<UHR_Header>(),
        8usize,
        concat!("Alignment of ", stringify!(UHR_Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Header>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Header),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Header>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Header),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UHR_HeadersData {
    pub headers: *const UHR_Header,
    pub count: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_UHR_HeadersData() {
    assert_eq!(
        ::std::mem::size_of::<UHR_HeadersData>(),
        16usize,
        concat!("Size of: ", stringify!(UHR_HeadersData))
    );
    assert_eq!(
        ::std::mem::align_of::<UHR_HeadersData>(),
        8usize,
        concat!("Alignment of ", stringify!(UHR_HeadersData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_HeadersData>())).headers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_HeadersData),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_HeadersData>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_HeadersData),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_HeadersData>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_HeadersData),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UHR_BodyData {
    pub body: *const ::std::os::raw::c_char,
    pub length: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_UHR_BodyData() {
    assert_eq!(
        ::std::mem::size_of::<UHR_BodyData>(),
        16usize,
        concat!("Size of: ", stringify!(UHR_BodyData))
    );
    assert_eq!(
        ::std::mem::align_of::<UHR_BodyData>(),
        8usize,
        concat!("Alignment of ", stringify!(UHR_BodyData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_BodyData>())).body as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_BodyData),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_BodyData>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_BodyData),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_BodyData>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_BodyData),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UHR_Response {
    pub request_id: UHR_RequestId,
    pub http_status: u32,
    pub headers: UHR_HeadersData,
    pub body: UHR_BodyData,
}
#[test]
fn bindgen_test_layout_UHR_Response() {
    assert_eq!(
        ::std::mem::size_of::<UHR_Response>(),
        40usize,
        concat!("Size of: ", stringify!(UHR_Response))
    );
    assert_eq!(
        ::std::mem::align_of::<UHR_Response>(),
        8usize,
        concat!("Alignment of ", stringify!(UHR_Response))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Response>())).request_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Response),
            "::",
            stringify!(request_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Response>())).http_status as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Response),
            "::",
            stringify!(http_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Response>())).headers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Response),
            "::",
            stringify!(headers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UHR_Response>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UHR_Response),
            "::",
            stringify!(body)
        )
    );
}
extern "C" {
    pub fn UHR_ErrorToString(err: UHR_Error, errorMessageOut: *mut UHR_StringRef) -> UHR_Error;
}
extern "C" {
    pub fn UHR_CreateHTTPContext(httpContextHandleOut: *mut UHR_HttpContext) -> UHR_Error;
}
extern "C" {
    pub fn UHR_DestroyHTTPContext(httpContextHandle: UHR_HttpContext) -> UHR_Error;
}
extern "C" {
    pub fn UHR_CreateRequest(
        httpContextHandle: UHR_HttpContext,
        url: UHR_StringRef,
        method: UHR_Method,
        headers: *mut UHR_Header,
        headersCount: u32,
        body: *mut ::std::os::raw::c_char,
        bodyLength: u32,
        ridOut: *mut UHR_RequestId,
    ) -> UHR_Error;
}
extern "C" {
    pub fn UHR_Update(
        httpContextHandle: UHR_HttpContext,
        responsesOut: *mut UHR_Response,
        responsesCapacity: u32,
        responseCountOut: *mut u32,
    ) -> UHR_Error;
}
extern "C" {
    pub fn UHR_DestroyRequests(
        httpContextHandle: UHR_HttpContext,
        requestIDs: *mut UHR_RequestId,
        requestIDsCount: u32,
    ) -> UHR_Error;
}
